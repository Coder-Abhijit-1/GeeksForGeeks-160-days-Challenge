class Solution {
    int maxValue(int[] arr) {
        int n = arr.length;
        if (n == 0) return 0;
        if (n == 1) return arr[0];
        if (n == 2) return Math.max(arr[0], arr[1]);

        // Case 1: exclude last house
        int case1 = robLinear(arr, 0, n - 2);

        // Case 2: exclude first house
        int case2 = robLinear(arr, 1, n - 1);

        return Math.max(case1, case2);
    }

    // Standard House Robber DP for linear array
    private int robLinear(int[] arr, int start, int end) {
        int prev2 = 0;
        int prev1 = 0;
        
        for (int i = start; i <= end; i++) {
            int include = arr[i] + prev2;
            int exclude = prev1;
            int curr = Math.max(include, exclude);
            prev2 = prev1;
            prev1 = curr;
        }

        return prev1;
    }
}
