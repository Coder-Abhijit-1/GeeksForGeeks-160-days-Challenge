
class Solution {
    public ArrayList<Integer> maxOfMins(int[] arr) {
        
        int n = arr.length;
        int[] res = new int[n+1];
        int[] prev = new int[n];
        int[] next = new int[n];
        
        Stack<Integer > st = new Stack<>();
        
        for( int i = 0 ; i < n ; i++){
            while( !st.isEmpty() && arr[st.peek()] >= arr[i])  st.pop();
            
            prev[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }
        
        st.clear();
        
        for( int i = n-1 ; i >= 0 ; i--){
            while( !st.isEmpty() && arr[st.peek()] >= arr[i])  st.pop();
            
            next[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }
        
        for( int i = 0 ; i < n ;i++){
            int len = next[i] - prev[i] - 1;
            res[len] = Math.max(res[len] , arr[i]);
        }
        
        for( int i = n-1; i >= 1; i--){
            res[i] = Math.max(res[i] , res[i+1]);
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        for( int i = 1 ; i <= n; i++){
            ans.add(res[i]);
        }
        return ans;
        
        
            
        
    }
}
