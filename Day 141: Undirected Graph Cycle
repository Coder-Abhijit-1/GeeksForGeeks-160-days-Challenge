class Solution {
    public boolean isCycle(int V, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]); // undirected
        }

        boolean[] visited = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (bfsCheckCycle(i, adj, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean bfsCheckCycle(int src, List<List<Integer>> adj, boolean[] visited) {
        Queue<int[]> q = new LinkedList<>();
        visited[src] = true;
        q.offer(new int[]{src, -1}); // node, parent

        while (!q.isEmpty()) {
            int[] pair = q.poll();
            int node = pair[0];
            int parent = pair[1];

            for (int neigh : adj.get(node)) {
                if (!visited[neigh]) {
                    visited[neigh] = true;
                    q.offer(new int[]{neigh, node});
                } else if (neigh != parent) {
                    // Visited neighbor that is not the parent â†’ cycle found
                    return true;
                }
            }
        }
        return false;
    }
}
