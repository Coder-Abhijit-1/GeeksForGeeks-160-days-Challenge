class Solution {
    Stack<Integer> st ;
    Stack<Integer> minSt;
    
    public Solution() {
        st = new Stack<>();
        minSt = new Stack<>();
    }

    // Add an element to the top of Stack
    public void push(int x) {
        st.push(x);
        if(minSt.isEmpty() || x <= minSt.peek()){
            minSt.push(x);
        }
    }

    // Remove the top element from the Stack
    public void pop() {
        
        if(!st.isEmpty()){
        int popValue = st.pop();
        if(popValue == minSt.peek()){
            minSt.pop();
        }
        }
    }

    // Returns top element of the Stack
        
    public int peek() {
        if(st.isEmpty()) return -1;
        return st.peek();
    }

        
    // Finds minimum element of Stack
    public int getMin() {
        if(minSt.isEmpty()) return -1;
        return minSt.peek();
    }
    
    public List<Integer> processQueries(int[][] queries){
        List<Integer> res = new ArrayList<>();
        for( int[] q : queries){
            if( q[0]== 1){
                push(q[1]);
            }else if(q[0] == 2){
                pop();
            }else if(q[0] == 3){
                res.add(peek());
            }else if(q[0] == 4){
                res.add(getMin());
            }
        }
        return res;
    }
}
