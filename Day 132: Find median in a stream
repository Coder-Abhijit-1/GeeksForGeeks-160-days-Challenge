import java.util.*;

class Solution {
    public ArrayList<Double> getMedian(int[] arr) {
        PriorityQueue<Integer> left = new PriorityQueue<>(Collections.reverseOrder()); // Max-Heap
        PriorityQueue<Integer> right = new PriorityQueue<>(); // Min-Heap
        ArrayList<Double> medians = new ArrayList<>();

        for (int num : arr) {
            if (left.isEmpty() || num <= left.peek()) {
                left.offer(num);
            } else {
                right.offer(num);
            }

            // Balance the heaps
            if (left.size() > right.size() + 1) {
                right.offer(left.poll());
            } else if (right.size() > left.size()) {
                left.offer(right.poll());
            }

            // Get the median
            if (left.size() == right.size()) {
                double median = (left.peek() + right.peek()) / 2.0;
                medians.add(median);
            } else {
                medians.add((double) left.peek());
            }
        }

        return medians;
    }
}
