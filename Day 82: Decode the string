
class Solution {
    static String decodeString(String s) {
        Stack<Integer> nSt = new Stack<>();  // numberStack;
        Stack<String> sSt = new Stack<>(); // stringStack
        StringBuilder numStr = new StringBuilder();
        
        
        for( int i = 0 ; i < s.length() ;i++){
            char ch = s.charAt(i);
            
            if(Character.isDigit(ch)){
                numStr.append(ch);
            }else if(ch == '['){
                nSt.push(Integer.parseInt(numStr.toString()));
                numStr.setLength(0);
                sSt.push("[");
            }else if(Character.isLetter(ch)){
                sSt.push(String.valueOf(ch));
            }else if(ch == ']'){
                StringBuilder temp = new StringBuilder();
                while(!sSt.isEmpty() && ! sSt.peek().equals("[")){
                    temp.insert(0 , sSt.pop());
                }
                sSt.pop();
                
                int count = nSt.pop();
                String rep = temp.toString().repeat(count);
                sSt.push(rep);
            }
        }   
        
        StringBuilder res = new StringBuilder();
        for(String part : sSt){
            res.append(part);
        }
        return res.toString();
    }
}
