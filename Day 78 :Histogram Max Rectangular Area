class Solution {
    public static int getMaxArea(int arr[]) {
        
        int ps[] = prevSmaller(arr);
        int ns[] = nextSmaller(arr);
        int maxArea = 0;
        
        for( int i = 0 ; i < arr.length;i++){
            int cur = (ns[i] - ps[i] -1) * arr[i];
            maxArea = Math.max(maxArea , cur);
        }
        return maxArea;
    }
    public static int[] prevSmaller(int arr[]){
        int ps[] = new int[arr.length];
        Stack<Integer> st = new Stack<>();
        
        for( int i = 0 ; i < arr.length; i++){
            while(!st.isEmpty() && arr[st.peek()] >= arr[i]){
                st.pop();   
            }
            ps[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);

        }
        return ps;
    }
    public static int[] nextSmaller(int arr[]){
        int ns[] = new int[arr.length];
        Stack<Integer> st = new Stack<>();
        
        for( int i = arr.length -1; i >= 0; i--){
            while(!st.isEmpty() && arr[st.peek()] >= arr[i]){
                st.pop();   
            }
            ns[i] = st.isEmpty() ? arr.length : st.peek();
            st.push(i);

        }
        return ns;
    }
    
}
