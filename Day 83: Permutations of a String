 class Solution {
    public ArrayList<String> findPermutation(String s) {
        
        ArrayList<String> res = new ArrayList<>();
        char[] chars = s.toCharArray();
        Arrays.sort(chars);
        boolean[] visited = new boolean[s.length()];
        backtrack(chars, new StringBuilder() , visited, res);
        return res;
    }
    
    private void backtrack(char[] chars , StringBuilder temp , boolean[] visited , ArrayList<String> res){
        if(temp.length() == chars.length){
            res.add(temp.toString());
            return;
        }
        
        for( int i = 0 ; i < chars.length; i++){
            if(visited[i]) continue;
            
            if(i > 0 && chars[i] == chars[i-1] && !visited[i - 1]) continue;
            
            visited[i] = true;
            temp.append(chars[i]);
            
            backtrack(chars, temp , visited , res);
            
            temp.deleteCharAt(temp.length() - 1);
            visited[i] = false;
        }
    }
}
