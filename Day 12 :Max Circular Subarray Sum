
class Solution {

    // a: input array
    // n: size of array
    // Function to find maximum circular subarray sum.
    public int circularSubarraySum(int arr[]) {
        
        int n = arr.length;
        int maxKadane = kadane(arr);
        int totalSum = 0;
        
        for(int num : arr){
            totalSum += num;
        }
        
        for( int i = 0; i< n ;i++){
            arr[i] = -arr[i];
        }
        
        int minSubArray = kadane(arr);
        
        int maxCir = totalSum + minSubArray;
         if(maxCir == 0){
             return maxKadane;
         }
         
         return Math.max(maxKadane,maxCir);

        // Your code here
    }
    
    private int kadane(int [] arr){
        int maxEndingHere = arr[0];
        int maxSoFar = arr[0];
        
        for(int i = 1 ; i < arr.length; i++){
            maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);
            maxSoFar = Math.max(maxSoFar , maxEndingHere);
        }
        return maxSoFar;
    }
}
