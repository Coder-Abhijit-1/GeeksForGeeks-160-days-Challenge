
class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
        
        int n = arr.length;
        
        return mrgsort(arr,0,n-1);
    }
    
    static int mrgsort(int[] arr, int left , int right){
        int count = 0;
        if(left < right){
             int mid = (left + right) / 2;
             
             count += mrgsort(arr,left , mid);
             count +=mrgsort( arr,mid+1 , right);
             
             count += merge(arr,left,mid,right);
        }
        return count;
    }
    
    static int merge(int[] arr , int left , int mid , int right){
        int[] temp = new int[right-left+1];
        int i = left , j = mid + 1, k = 0;
        int invCount = 0;
        
        while( i <= mid && j  <= right){
            if( arr[i] <= arr[j]){
                temp[k++] = arr[i++];
            }else{
                temp [k++] = arr[j++];
                invCount += (mid-i+1);
            }
        }
        
        while( i <= mid ) temp[k++]  = arr[i++];
        while( j <= right) temp[k++] = arr[j++];
        
        for( i = left , k = 0 ; i<= right; i++,k++){
            arr[i] = temp[k];
        }
        return invCount;
    }
    
}
