class Solution {
    public boolean isBridge(int V, int[][] edges, int c, int d) {
         List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        
        for (int[] e : edges) {
            int u = e[0], v = e[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        boolean[] visited = new boolean[V];
        
        dfs(c, adj, visited, c, d);
        
        return !visited[d];
    }
    
    private void dfs(int node, List<List<Integer>> adj, boolean[] visited, int c, int d) {
        visited[node] = true;
        
        for (int nei : adj.get(node)) {
            if ((node == c && nei == d) || (node == d && nei == c)) continue;
            if (!visited[nei]) dfs(nei, adj, visited, c, d);
        }
    }
}
