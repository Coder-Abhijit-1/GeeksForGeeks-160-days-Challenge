
class Solution {
    static Node addTwoLists(Node num1, Node num2) {
        num1 = t(num1);
        num2 = t(num2);
        
        int l1 = getLen(num1) , l2 = getLen(num2);
        if(l1 < l2) num1 = pad(num1 , l2 - l1);
        if(l2 < l1) num2 = pad(num2 , l1 - l2);
        
        Pair res = add(num1 , num2);
        if(res.carry > 0){
            Node head = new Node(res.carry);
            head.next = res.node;
            return head;
        }
        return res.node;
    }
    static class Pair{
        Node node ; int carry;
        Pair(Node n , int c){ node = n ; carry = c;}
    } 
    
    static Pair add(Node n1 , Node n2){
        if(n1 == null) return new Pair (null , 0);
        Pair next = add(n1.next , n2.next);
        int sum = n1.data + n2.data + next.carry;
        Node cur = new Node (sum % 10);
        cur.next = next.node;
        return new Pair (cur, sum / 10);
    }
    static Node pad(Node head , int cnt){
        while(cnt --> 0){
            Node temp = new Node(0);
            temp.next = head;
            head = temp;
        }
        return head;
    }
    
    static int getLen(Node head){
        int l = 0 ;
        while(head != null) { l++ ; head = head.next;}
        return l;
    }
    static Node t(Node head){
        while(head != null && head.data == 0 ) head = head.next;
        return head == null ? new Node(0) : head;
    }
}
