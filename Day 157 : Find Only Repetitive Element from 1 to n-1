// User function Template for Java
class Solution {
    public int findDuplicate(int[] arr) {
        int n = arr.length ,val = -1;
        
        // Using bit manipulation
        int xorArr = 0 ;
        for( int num  : arr){
            xorArr ^= num;
        }
        
        int xorRange = 0 ;
        for( int i = 1 ; i < n ; i++){
            xorRange ^= i;
        }
        return xorArr ^ xorRange;
        
        
        
        // Using two pointers approach O(n)
        int slow =0 , fast = 0 ;
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);

        slow = 0 ;
        while( slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow ;
        
        
        // Using sorting O(nlogn)
        Arrays.sort(arr);
        for( int i = 1 ;i < n ; i++){
            if(arr[i] == arr[i-1]) val = arr[i]; 
        }
        return val ;
        
        
        // Brute force approach O(n^2)
        for( int i = 0 ; i < n ;i++){
            for( int j = 1 ;  j< n ;j++){
                if(i == j) continue;
                if( arr[i] == arr[j]) val = arr[i];
            }
        }
        return val;
    }
}
