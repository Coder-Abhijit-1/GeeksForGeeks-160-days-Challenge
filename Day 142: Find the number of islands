class Solution {
    public int countIslands(char[][] grid) {
        if( grid == null || grid.length == 0 || grid[0].length == 0 ){
            return 0 ;
        }
        
        int rows = grid.length;
        int columns = grid[0].length;
        int islands = 0 ;
        
        for( int i = 0 ; i < rows ; i++ ){
            for( int j = 0 ; j < columns ; j++){
                if(grid[i][j] == 'L'){
                    dfs(grid ,i,j);
                    islands++;
                }
            }
        }
        return islands;
    }
    public void dfs(char[][] grid , int i , int j ){
        if( i < 0 || i >= grid.length || j < 0 || j >= grid[0].length){
            return ;
        }
        
        if(grid[i][j] == 'W'){
            return ;
        }
        
        grid[i][j] = 'W';
        
        int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
        int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};
        
        for (int k = 0; k < 8; k++) {
            dfs(grid, i + dx[k], j + dy[k]);
        }
    }
}
