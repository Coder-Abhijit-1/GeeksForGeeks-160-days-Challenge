/*
class Node {
    int data;
    Node left, right;

    Node(int key) {
        data = key;
        left = right = null;
    }
}
*/

class Solution {
    static int preIdx ;
    static Map<Integer , Integer> inorderMap;
    public static Node buildTree(int inorder[], int preorder[]) {
        preIdx = 0 ;
        inorderMap = new HashMap<>();
        
        for( int i = 0 ; i < inorder.length ;i++){
            inorderMap.put(inorder[i] , i);
        }
        return build(preorder , 0 , inorder.length - 1);
    }
    private static Node build( int[] preOrder, int inStart , int inEnd){
        if( inStart > inEnd) return null;
        
        int rootVal = preOrder[preIdx++];
        Node root = new Node(rootVal);
        
        int inIdx = inorderMap.get(rootVal);
        
        root.left = build(preOrder , inStart , inIdx - 1);
        root.right = build(preOrder , inIdx + 1 , inEnd);
        return root;
    }
}
