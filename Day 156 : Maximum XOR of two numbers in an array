// User function Template for Java

class Solution {
        class TrieNode {
        TrieNode zero, one;
    }
    
    void insert(TrieNode root, int n) {
        TrieNode cur = root;
        for (int i = 31; i >= 0; i--) {
            int bit = (n >> i) & 1;
            if (bit == 0) {
                if (cur.zero == null) cur.zero = new TrieNode();
                cur = cur.zero;
            } else {
                if (cur.one == null) cur.one = new TrieNode();
                cur = cur.one;
            }
        }
    }

    int findMaxXor(TrieNode root, int n) {
        TrieNode cur = root;
        int ans = 0;
        for (int i = 31; i >= 0; i--) {
            int bit = (n >> i) & 1;
            if (bit == 1) {
                if (cur.zero != null) {
                    ans |= (1 << i);
                    cur = cur.zero;
                } else {
                    cur = cur.one;
                }
            } else {
                if (cur.one != null) {
                    ans |= (1 << i);
                    cur = cur.one;
                } else {
                    cur = cur.zero;
                }
            }
        }
        return ans;
    }

    public int maxXor(int[] arr) {
        TrieNode root = new TrieNode();
        int ans = 0;

        // Insert the first element
        insert(root, arr[0]);

        // From second element, query + insert
        for (int i = 1; i < arr.length; i++) {
            ans = Math.max(ans, findMaxXor(root, arr[i]));
            insert(root, arr[i]);
        }

        return ans;
        // int maxVal = 0 ;
        // for( int i = 0 ; i < arr.length ; i++){
        //     for( int j = 0 ; j < arr.length ; j++){
        //         if( i == j) continue ;
        //         maxVal = Math.max(maxVal , arr[i] ^ arr[j]);
        //     }
        // }
        // return maxVal ;
    }
}
