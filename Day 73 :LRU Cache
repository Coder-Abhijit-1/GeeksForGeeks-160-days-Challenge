

class LRUCache {

    class Node{
        int key , value;
        Node next, prev ;
        
        Node( int k , int v ){
            key = k;
            value = v;
        }
    }
    private int cap ;
    private Map<Integer , Node> map ;
    private Node head , tail;
    
    private void deleteNode(Node node ){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    private void insertNode(Node node){
        node.prev = tail.prev;
        node.next = tail;
        
        tail.prev.next  = node;
        tail.prev = node;
    }
    
    public LRUCache(int cap) {
        this.cap = cap;
        map= new HashMap<>();
        
        head = new Node(0 , 0);
        tail = new Node(0 , 0);
        
        head.next = tail;
        tail.prev = head;
    }

    public  int get(int key) {
        
        if(!map.containsKey(key)) return -1;
        
        Node node = map.get(key);
        deleteNode(node);
        insertNode(node);
        return node.value;
    }

        
    public  void put(int key, int value) {
        
        if(map.containsKey(key)){
            Node node = map.get(key);
            node.value = value;
            deleteNode(node);
            insertNode(node);
        }else{
            if(map.size() == cap){
                Node lru = head.next;
                deleteNode(lru);
                map.remove(lru.key);
            }
        Node node = new Node(key, value);
        map.put(key, node);
        insertNode(node);}
        
    }
}
