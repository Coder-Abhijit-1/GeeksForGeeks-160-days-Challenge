import java.util.*;

class Solution {
    static class Job {
        int deadline;
        int profit;
        
        Job(int d, int p) {
            deadline = d;
            profit = p;
        }
    }

    public ArrayList<Integer> jobSequencing(int[] deadline, int[] profit) {
        int n = deadline.length;
        Job[] jobs = new Job[n];

        // Step 1: Create Job objects
        for (int i = 0; i < n; i++) {
            jobs[i] = new Job(deadline[i], profit[i]);
        }

        // Step 2: Sort jobs by descending profit
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);

        // Step 3: Find the maximum deadline to size the time slots array
        int maxDeadline = 0;
        for (int d : deadline) {
            maxDeadline = Math.max(maxDeadline, d);
        }

        // Step 4: Time slots (1-based indexing)
        boolean[] slot = new boolean[maxDeadline + 1];  // default false
        int jobCount = 0;
        int maxProfit = 0;

        // Step 5: Try placing each job in the latest available slot
        for (Job job : jobs) {
            for (int j = job.deadline; j > 0; j--) {
                if (!slot[j]) {
                    slot[j] = true;
                    jobCount++;
                    maxProfit += job.profit;
                    break;
                }
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        result.add(jobCount);
        result.add(maxProfit);
        return result;
    }
}
